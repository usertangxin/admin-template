<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | 默认会话驱动程序
    |--------------------------------------------------------------------------
    |
    | 此选项确定用于传入请求的默认会话驱动程序。Laravel 支持多种存储选项
    | 来持久化会话数据。数据库存储是一个很好的默认选择。
    |
    | 支持的驱动: "file", "cookie", "database", "memcached",
    |            "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | 会话生命周期
    |--------------------------------------------------------------------------
    |
    | 在这里，你可以指定会话在过期前允许保持空闲的分钟数。如果你希望会话
    | 在浏览器关闭时立即过期，则可以通过 expire_on_close 配置选项来指定。
    |
    */

    'lifetime' => (int) env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | 会话加密
    |--------------------------------------------------------------------------
    |
    | 此选项允许你轻松指定在存储所有会话数据之前对其进行加密。所有加密操作
    | 均由 Laravel 自动执行，你可以像平常一样使用会话。
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | 会话文件位置
    |--------------------------------------------------------------------------
    |
    | 当使用 "file" 会话驱动程序时，会话文件将存储在磁盘上。这里定义了默认的存储位置；
    | 不过，你可以自由指定其他存储位置。
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | 会话数据库连接
    |--------------------------------------------------------------------------
    |
    | 当使用 "database" 或 "redis" 会话驱动程序时，你可以指定用于管理这些会话的连接。
    | 此连接应与你的数据库配置选项中的连接相对应。
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | 会话数据库表
    |--------------------------------------------------------------------------
    |
    | 当使用 "database" 会话驱动程序时，你可以指定用于存储会话的表。当然，已经为你定义了一个合理的默认表；
    | 不过，你可以将其更改为其他表。
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | 会话缓存存储
    |--------------------------------------------------------------------------
    |
    | 当使用框架的缓存驱动会话后端之一时，你可以定义用于在请求之间存储会话数据的缓存存储。
    | 这必须与你定义的缓存存储之一匹配。
    |
    | 影响: "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | 会话清理概率
    |--------------------------------------------------------------------------
    |
    | 某些会话驱动程序必须手动清理其存储位置，以从存储中删除旧会话。这里定义了在给定请求中进行清理的概率。
    | 默认情况下，概率为 2%。
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | 会话 Cookie 名称
    |--------------------------------------------------------------------------
    |
    | 在这里，你可以更改框架创建的会话 Cookie 的名称。通常情况下，你不需要更改此值，
    | 因为这样做不会带来显著的安全改进。
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | 会话 Cookie 路径
    |--------------------------------------------------------------------------
    |
    | 会话 Cookie 路径确定了 Cookie 被视为可用的路径。通常情况下，这将是你应用程序的根路径，
    | 但你可以在必要时更改此路径。
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | 会话 Cookie 域名
    |--------------------------------------------------------------------------
    |
    | 此值确定了会话 Cookie 可用的域名和子域名。默认情况下，Cookie 对根域名和所有子域名都可用。
    | 通常情况下，不应该更改此值。
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | 仅 HTTPS 协议下的 Cookie
    |--------------------------------------------------------------------------
    |
    | 将此选项设置为 true 后，只有在浏览器使用 HTTPS 连接时，会话 Cookie 才会被发送回服务器。
    | 这将确保在无法安全传输时不会发送 Cookie。
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | 仅 HTTP 访问
    |--------------------------------------------------------------------------
    |
    | 将此值设置为 true 后，JavaScript 将无法访问 Cookie 的值，并且 Cookie 只能通过 HTTP 协议访问。
    | 通常不建议禁用此选项。
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | 同站 Cookie
    |--------------------------------------------------------------------------
    |
    | 此选项确定了跨站请求发生时 Cookie 的行为，可用于减轻 CSRF 攻击。默认情况下，
    | 我们将此值设置为 "lax" 以允许安全的跨站请求。
    |
    | 参考: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | 支持的值: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | 分区 Cookie
    |--------------------------------------------------------------------------
    |
    | 将此值设置为 true 后，在跨站上下文中，Cookie 将与顶级站点关联。
    | 当 Cookie 标记为 "secure" 且 Same-Site 属性设置为 "none" 时，浏览器会接受分区 Cookie。
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];
