<?php

return [

    /*
    |--------------------------------------------------------------------------
    | 文件名
    |--------------------------------------------------------------------------
    |
    | 默认文件名。
    |
    */

    'filename' => '_ide_helper.php',

    /*
    |--------------------------------------------------------------------------
    | 模型文件名
    |--------------------------------------------------------------------------
    |
    | 模型辅助文件的默认文件名。
    |
    */

    'models_filename' => '_ide_helper_models.php',

    /*
    |--------------------------------------------------------------------------
    | PhpStorm 元数据文件名
    |--------------------------------------------------------------------------
    |
    | PhpStorm 还支持 `.phpstorm.meta.php/` 目录下的任意文件，
    | 如果你的项目需要额外的文件，例如 `.phpstorm.meta.php/laravel_ide_Helper.php`。
    |
    */
    'meta_filename' => '.phpstorm.meta.php',

    /*
    |--------------------------------------------------------------------------
    | 流畅方法辅助
    |--------------------------------------------------------------------------
    |
    | 设置为 true 以生成常见的流畅方法。
    |
    */

    'include_fluent' => false,

    /*
    |--------------------------------------------------------------------------
    | 工厂构建器
    |--------------------------------------------------------------------------
    |
    | 设置为 true 以生成工厂生成器，以便更好地实现 factory() 方法的自动补全。
    |
    | 对于 Laravel 8 或更高版本已弃用。
    |
    */

    'include_factory_builders' => false,

    /*
    |--------------------------------------------------------------------------
    | 写入模型魔术方法
    |--------------------------------------------------------------------------
    |
    | 设置为 false 以禁用写入模型的魔术方法。
    |
    */

    'write_model_magic_where' => true,

    /*
    |--------------------------------------------------------------------------
    | 写入模型外部 Eloquent 构建器方法
    |--------------------------------------------------------------------------
    |
    | 设置为 false 以禁用写入外部 Eloquent 构建器方法。
    |
    */

    'write_model_external_builder_methods' => true,

    /*
    |--------------------------------------------------------------------------
    | 写入模型关联计数属性
    |--------------------------------------------------------------------------
    |
    | 设置为 false 以禁用将关联计数属性写入模型 DocBlock。
    |
    */

    'write_model_relation_count_properties' => true,

    /*
    |--------------------------------------------------------------------------
    | 写入 Eloquent 模型混入
    |--------------------------------------------------------------------------
    |
    | 这将为 Laravel 框架中包含的模型类添加必要的 DocBlock 混入。
    | 这有助于 IDE 实现自动补全。
    |
    | 请注意，此设置会修改 `/vendor` 目录中的文件。
    |
    */

    'write_eloquent_model_mixins' => false,

    /*
    |--------------------------------------------------------------------------
    | 要包含的辅助文件
    |--------------------------------------------------------------------------
    |
    | 包含辅助文件。默认情况下不包含，但可以使用 --helpers (-H) 选项切换。
    | 可以包含额外的辅助文件。
    |
    */

    'include_helpers' => false,

    'helper_files' => [
        base_path() . '/vendor/laravel/framework/src/Illuminate/Support/helpers.php',
        base_path() . '/vendor/laravel/framework/src/Illuminate/Foundation/helpers.php',
    ],

    /*
    |--------------------------------------------------------------------------
    | 要包含的模型位置
    |--------------------------------------------------------------------------
    |
    | 定义 ide-helper:models 命令应在哪些目录中查找模型。
    |
    | 支持 glob 模式，以便更轻松地访问子目录中的模型，例如 `app/Services/* /Models`（不含空格）。
    |
    */

    'model_locations' => [
        'app',
        'Modules',
    ],

    /*
    |--------------------------------------------------------------------------
    | 要忽略的模型
    |--------------------------------------------------------------------------
    |
    | 定义应忽略哪些模型。
    |
    */

    'ignored_models' => [
        // App\MyModel::class,
    ],

    /*
    |--------------------------------------------------------------------------
    | 模型钩子
    |--------------------------------------------------------------------------
    |
    | 定义要为模型运行哪些钩子类以添加自定义信息。
    |
    | 钩子应实现 Barryvdh\LaravelIdeHelper\Contracts\ModelHookInterface。
    |
    */

    'model_hooks' => [
        // App\Support\IdeHelper\MyModelHook::class
    ],

    /*
    |--------------------------------------------------------------------------
    | 额外类
    |--------------------------------------------------------------------------
    |
    | 这些实现实际上并未被扩展，而是通过魔术函数调用。
    |
    */

    'extra' => [
        'Eloquent' => ['Illuminate\Database\Eloquent\Builder', 'Illuminate\Database\Query\Builder'],
        'Session'  => ['Illuminate\Session\Store'],
    ],

    'magic' => [],

    /*
    |--------------------------------------------------------------------------
    | 接口实现
    |--------------------------------------------------------------------------
    |
    | 这些接口将被实现类替换。一些接口由辅助工具检测，其他接口可以在下面列出。
    |
    */

    'interfaces' => [
        // App\MyInterface::class => App\MyImplementation::class,
    ],

    /*
     |--------------------------------------------------------------------------
     | 对驼峰命名模型的支持
     |--------------------------------------------------------------------------
     |
     | 有一些 Laravel 包（例如 Eloquence）允许通过驼峰命名而不是蛇形命名来访问 Eloquent 模型属性。
     |
     | 启用此选项将支持这些包，将所有模型属性保存为驼峰命名，而不是蛇形命名。
     |
     | 例如，通常你会看到这样的内容：
     |
     |  * @property \Illuminate\Support\Carbon $created_at
     |  * @property \Illuminate\Support\Carbon $updated_at
     |
     | 启用此选项后，属性将变为这样：
     |
     |  * @property \Illuminate\Support\Carbon $createdAt
     |  * @property \Illuminate\Support\Carbon $updatedAt
     |
     | 注意，目前这是一个全有或全无的选项。
     |
     */
    'model_camel_case_properties' => false,

    /*
    |--------------------------------------------------------------------------
    | 属性类型转换
    |--------------------------------------------------------------------------
    |
    | 将给定的“实际类型”转换为给定的“类型”。
    |
    */
    'type_overrides' => [
        'integer' => 'int',
        'boolean' => 'bool',
    ],

    /*
    |--------------------------------------------------------------------------
    | 包含类的 DocBlock
    |--------------------------------------------------------------------------
    |
    | 包含类的 DocBlock，以便对魔术方法和属性进行额外的代码检查。
    |
    */
    'include_class_docblocks' => false,

    /*
    |--------------------------------------------------------------------------
    | 强制使用完全限定名
    |--------------------------------------------------------------------------
    |
    | 在 DocBlock 中使用完全限定（类）名，
    | 即使类存在于同一命名空间中，或者有类的导入（use className）。
    |
    */
    'force_fqn' => false,

    /*
    |--------------------------------------------------------------------------
    | 使用泛型语法
    |--------------------------------------------------------------------------
    |
    | 在文档注释中使用泛型语法，
    | 例如 `Collection<User>` 而不是 `Collection|User[]`。
    |
    */
    'use_generics_annotations' => true,

    /*
    |--------------------------------------------------------------------------
    | 额外的关联类型
    |--------------------------------------------------------------------------
    |
    | 有时需要创建自定义的关联类型。数组的键是关联方法名，值是关联的完全限定类名，
    | 例如 `'relationName' => RelationShipClass::class`。
    |
    */
    'additional_relation_types' => [],

    /*
    |--------------------------------------------------------------------------
    | 额外的关联返回类型
    |--------------------------------------------------------------------------
    |
    | 使用自定义关联类型时，类名可能不包含关联的正确返回类型。数组的键是关联方法名，
    | 值是关联的返回类型（'many' 或 'morphTo'）。
    | 例如 `'relationName' => 'many'`。
    |
    */
    'additional_relation_return_types' => [],

    /*
    |--------------------------------------------------------------------------
    | 对非空列强制使用可空的 Eloquent 关联
    |--------------------------------------------------------------------------
    |
    | 设置为 true（默认值）时，此选项会强制使用可空的 Eloquent 关联。
    | 但是，在应用逻辑确保存在关联记录的情况下，可能需要将此选项设置为 false，以避免不必要的 null 警告。
    |
    | 默认值：true
    | 没有外键约束的非空列将具有 "可空" 的关联。
    |  * @property int $not_null_column_with_no_foreign_key_constraint
    |  * @property-read BelongsToVariation|null $notNullColumnWithNoForeignKeyConstraint
    |
    | 选项：false
    | 没有外键约束的非空列将具有 "不可空" 的关联。
    |  * @property int $not_null_column_with_no_foreign_key_constraint
    |  * @property-read BelongsToVariation $notNullColumnWithNoForeignKeyConstraint
    |
    */

    'enforce_nullable_relationships' => true,

    /*
    |--------------------------------------------------------------------------
    | 在迁移后运行 artisan 命令以生成模型助手
    |--------------------------------------------------------------------------
    |
    | 指定的命令应在迁移完成后运行。
    |
    */
    'post_migrate' => [
        // 'ide-helper:models --nowrite',
    ],

    /*
    |--------------------------------------------------------------------------
    | 可宏化的 Trait
    |--------------------------------------------------------------------------
    |
    | 定义哪些 Trait 应该被视为能够添加宏。
    | 你可以添加任何行为类似于原始 Laravel Trait 的自定义 Trait。
    |
    */
    'macroable_traits' => [
        Filament\Support\Concerns\Macroable::class,
        Spatie\Macroable\Macroable::class,
    ],

];
